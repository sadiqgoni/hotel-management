<?php 
namespace App\Livewire;

use App\Models\Guest;
use App\Models\MenuCategory;
use App\Models\MenuItem;
use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Table;
use Filament\Notifications\Notification;
use Livewire\Component;

class MenuOrdering extends Component
{
    public $menuItems = [];
    public $cartItems = [];
    public $subtotal = 0;
    public $tax = 0;
    public $total = 0;
    public $searchTerm = '';

    // Customer and table information
    public $customerType = ''; 
    public $selectedGuest = null;
    public $selectedTable = null;
    public $guestsWithRooms = [];
    public $tables = [];

    // Selected Category
    public $categories = [];
    public $selectedCategory = null;
    public $selectedCategoryName = '';



   
       // Dining and Billing options
       public $diningOption;
       public $billingOption = ''; // 'charge_room' or 'restaurant'
       public $paymentMethod = ''; // 'cash', 'card', or 'transfer'
   


    public function mount()
    {
        // Load initial data
        $this->categories = MenuCategory::all();
        $this->menuItems = MenuItem::all();
        $this->tables = Table::all(); 
        $this->loadGuestsWithCheckedInReservations();
    }

    public function loadGuestsWithCheckedInReservations()
    {
        // Query guests with checked-in reservations and include their room info
        $this->guestsWithRooms = Guest::whereHas('reservations', function ($query) {
            $query->where('status', 'Checked In'); // Filter only "check in" reservations
        })->with(['reservations' => function ($query) {
            $query->where('status', 'Checked In')->with('room'); // Load the room details for "check in" reservations
        }])->get();
    }

    public function updatedSearchTerm()
    {
        // Filter menu items based on search term
        $this->menuItems = MenuItem::where('name', 'like', '%' . $this->searchTerm . '%')->get();
    }

    public function filterByCategory($categoryId)
    {
        $category = MenuCategory::find($categoryId);
        $this->selectedCategory = $categoryId;
        $this->selectedCategoryName = $category->name;
        $this->menuItems = MenuItem::where('menu_category_id', $categoryId)->get();
    }

    public function addToCart($itemId)
    {
        $item = MenuItem::find($itemId);

        if (isset($this->cartItems[$itemId])) {
            $this->cartItems[$itemId]['quantity']++;
        } else {
            $this->cartItems[$itemId] = [
                'name' => $item->name,
                'price' => $item->price,
                'quantity' => 1,
                'total' => $item->price,
            ];
        }

        $this->calculateTotal();
    }

    public function removeFromCart($itemId)
    {
        if (isset($this->cartItems[$itemId])) {
            if ($this->cartItems[$itemId]['quantity'] > 1) {
                $this->cartItems[$itemId]['quantity']--;
            } else {
                unset($this->cartItems[$itemId]);
            }
        }

        $this->calculateTotal();
    }

    public function calculateTotal()
    {
        $this->subtotal = array_reduce($this->cartItems, function ($carry, $item) {
            return $carry + ($item['price'] * $item['quantity']);
        }, 0);

        $this->tax = $this->subtotal * 0.075; // Assuming 7.5% tax rate
        $this->total = $this->subtotal + $this->tax;
    }

    private function resetOrderState()
    {
        $this->cartItems = [];
        $this->subtotal = 0;
        $this->tax = 0;
        $this->total = 0;
        $this->customerType = '';
        $this->selectedGuest = null;
        $this->selectedTable = null;
        $this->billingOption = '';
        $this->diningOption = '';
        $this->paymentMethod = '';
    }

    public function placeOrder()
    {
        // 1. Validate Customer Type
        if (!$this->customerType) {
            Notification::make()
                ->title('Customer Type Missing')
                ->body('Please select a customer type before placing the order.')
                ->warning()
                ->send();
            return;
        }
    
        // 2. Validate for Hotel Guests
        if ($this->customerType === 'guest') {
            // a. Ensure a guest is selected
            if (!$this->selectedGuest) {
                Notification::make()
                    ->title('Guest Not Selected')
                    ->body('Please select a guest before placing the order.')
                    ->danger()
                    ->send();
                return;
            }
            if (!$this->diningOption) {
                Notification::make()
                    ->title('Dining Option Missing')
                    ->body('Please select a dining option before placing the order.')
                    ->warning()
                    ->send();
                return;
            }
    
            // b. If Dining Option is "Dine In", ensure a table is selected
            if ($this->diningOption === 'dinein' && !$this->selectedTable) {
                Notification::make()
                    ->title('Table Not Selected')
                    ->body('Please select a table for dine-in orders.')
                    ->danger()
                    ->send();
                return;
            }
    
            // b. Validate Billing Option
            if (!$this->billingOption) {
                Notification::make()
                    ->title('Billing Option Missing')
                    ->body('Please select a billing option before placing the order.')
                    ->warning()
                    ->send();
                return;
            }
    
            // c. If Billing Option is "Settle in Restaurant", ensure Payment Method is selected
            if ($this->billingOption === 'restaurant' && !$this->paymentMethod) {
                Notification::make()
                    ->title('Payment Method Missing')
                    ->body('Please select a payment method (Cash, Card, or Transfer) for restaurant settlement.')
                    ->warning()
                    ->send();
                return;
            }
               // All validations passed, proceed to place the order
        Notification::make()
        ->title('Order Placed Successfully')
        ->body('The order has been successfully placed!')
        ->success()
        ->send();
        $this->resetOrderState();
        }
    
        // 3. Validate for Walk-in Customers
        if ($this->customerType === 'walkin') {
            // a. Ensure Dining Option is selected
            if (!$this->diningOption) {
                Notification::make()
                    ->title('Dining Option Missing')
                    ->body('Please select a dining option before placing the order.')
                    ->warning()
                    ->send();
                return;
            }
    
            // b. If Dining Option is "Dine In", ensure a table is selected
            if ($this->diningOption === 'dinein' && !$this->selectedTable) {
                Notification::make()
                    ->title('Table Not Selected')
                    ->body('Please select a table for dine-in orders.')
                    ->danger()
                    ->send();
                return;
            }
    
            // c. Ensure Payment Method is selected for Walk-in Customers
            if (!$this->paymentMethod) {
                Notification::make()
                    ->title('Payment Method Missing')
                    ->body('Please select a payment method to proceed.')
                    ->warning()
                    ->send();
                return;
            }
               // All validations passed, proceed to place the order
        Notification::make()
        ->title('Order Placed Successfully')
        ->body('The order has been successfully placed!')
        ->success()
        ->send();
        $this->resetOrderState();
        }
    
     
    }
    
    
    public function render()
    {
        $this->menuItems = MenuItem::where('name', 'like', '%' . $this->searchTerm . '%')->get();

        return view('livewire.menu-ordering', [
            'menuItems' => $this->menuItems,
            'cartItems' => $this->cartItems,
            'subtotal' => $this->subtotal,
            'tax' => $this->tax,
            'total' => $this->total,
            'categories' => $this->categories,
            'guestsWithRooms' => $this->guestsWithRooms,
            'tables' => $this->tables,
        ]);
    }
}
